/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.agrocomercial.clientes.views;

import com.agrocomercial.clientes.context.AppContext;
import com.agrocomercial.clientes.controller.AddProductToOrderController;
import com.agrocomercial.clientes.models.Product;
import com.agrocomercial.clientes.utils.WindowUtils;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.List;

/**
 *
 * @author Jesús Perea
 */
public class AddProductToOrderView extends javax.swing.JFrame {

    private final transient AddProductToOrderController controller;
    private final transient AppContext localAppContext;
    /**
     * Creates new form AddProductToOrderView
     */
    public AddProductToOrderView(AppContext appContext, AddProductToOrderController controller) {
        initComponents();
        this.localAppContext = appContext;
        this.controller = controller;
        addQuantityInputListener();

        loadProducts();
    }

    private void loadProducts(){
        List<Product> products = controller.getProducts();

        products.forEach(product -> productSelectField.addItem(product));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productSelectField = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        totalField = new javax.swing.JTextField();
        addProductToOrderButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        productSelectField.setModel(new javax.swing.DefaultComboBoxModel<>());
        productSelectField.addActionListener(e -> updateTotal());

        jLabel1.setText("Producto");

        jLabel2.setText("Cantidad");

        jLabel3.setText("Total");

        totalField.setEditable(false);

        addProductToOrderButton.setText("añadir");
        addProductToOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductToOrderButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addProductToOrderButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(productSelectField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(quantityField)
                                .addComponent(totalField)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productSelectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProductToOrderButton)
                    .addComponent(cancelButton))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        redirectToOrderView();
    }

    private void addProductToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Product product = (Product) productSelectField.getSelectedItem();
        String quantityText = quantityField.getText().trim();

        if (product == null) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un producto.");
            return;
        }

        if (quantityText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar una cantidad.");
            return;
        }

        int quantity;

        try {
            quantity = Integer.parseInt(quantityText);

            if (quantity <= 0) {
                JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor a cero.");
                return;
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "La cantidad debe ser un número entero válido.");
            return;
        }

        controller.addProductToOrder(product, quantity);
        redirectToOrderView();
    }

    public void addQuantityInputListener() {
        quantityField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) { updateTotal(); }
            public void removeUpdate(DocumentEvent e) { updateTotal(); }
            public void changedUpdate(DocumentEvent e) { updateTotal(); }
        });
    }

    private void updateTotal() {
        Product product = (Product) productSelectField.getSelectedItem();
        String quantityText = quantityField.getText().trim();

        if (product == null || quantityText.isEmpty()) {
            totalField.setText("Total: $0");
            return;
        }

        try {
            int quantity = Integer.parseInt(quantityText);
            if (quantity <= 0) {
                totalField.setText("Total: $0");
                return;
            }

            double total = quantity * product.getPrice();
            totalField.setText(String.format("Total: $%.2f", total));
        } catch (NumberFormatException e) {
            totalField.setText("Total: $0");
        }
    }


    private void redirectToOrderView(){
        clearInputs();
        WindowUtils.closeAndShowPanel(this, localAppContext.getOrderView());
    }

    private void clearInputs() {
        quantityField.setText("");
        if (productSelectField.getItemCount() > 0) {
            productSelectField.setSelectedIndex(-1);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductToOrderButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<Product> productSelectField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JTextField totalField;
    // End of variables declaration//GEN-END:variables
}
